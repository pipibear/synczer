# -*- coding:utf-8 -*-

__all__ = ['Icon']

import os, sys
from PyQt5.QtCore import QByteArray, QBuffer
from PyQt5.QtGui import QIcon, QPixmap, QImage

class MyIcon():
    def __init__(self):
        pass

    def iconFromBase64(self, base64):
        pixmap = QPixmap()
        pixmap.loadFromData(QByteArray.fromBase64(base64))
        icon = QIcon(pixmap)
        return icon

    def iconToBase64(self, filename):
        image = QImage(filename)
        ba = QByteArray()
        buff = QBuffer(ba)
        image.save(buff, "PNG")
        return ba.toBase64().data()

    @staticmethod
    def getLogoIcon():
        base64 = b''
        pixmap = QPixmap()
        pixmap.loadFromData(QByteArray.fromBase64(base64))
        return QIcon(pixmap)
    

if __name__ == '__main__':
    iconPath = os.path.dirname(os.path.realpath(sys.argv[0])) + '/../logo.png'

    icon = MyIcon()
    print(icon.iconToBase64(iconPath))